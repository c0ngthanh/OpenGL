#version 330 core
struct Material {
    vec3 specular;
    float shininess;
}; 
//Decision ambient diffuse specular of Phong light
struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

out vec4 FragColor;
  
uniform Light light; 
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 lightColor2;
uniform vec3 lightPos2;
uniform vec3 viewPos;
uniform Material material;

in vec3 normal;
in vec3 FragPos;
in vec2 TexCoords;

  
void main()
{
    // ambient
    vec3 ambient = light.ambient * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * lightColor;

    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * material.specular * spec * lightColor;  

    //Light2
    //ambient
    vec3 ambient2 = light.ambient * lightColor2;
  	
    // diffuse 
    vec3 lightDir2 = normalize(lightPos2 - FragPos);
    float diff2 = max(dot(norm, lightDir2), 0.0);
    vec3 diffuse2 = light.diffuse * diff2 * lightColor2;

    // specular
    vec3 reflectDir2 = reflect(-lightDir2, norm);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
    vec3 specular2 = light.specular * material.specular * spec2 * lightColor2; 

    vec3 result = (specular + ambient + diffuse + specular2 + ambient2 + diffuse2) * objectColor;
    FragColor = vec4(result, 1.0);
}